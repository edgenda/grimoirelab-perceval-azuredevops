import logging

import traceback
from grimoirelab_toolkit.datetime import str_to_datetime
from grimoirelab_toolkit.uris import urijoin

from ...backend import (Backend,
                        BackendCommand,
                        BackendCommandArgumentParser,
                        DEFAULT_SEARCH_FIELD)
from ...client import HttpClient, RateLimitHandler
from ...utils import DEFAULT_DATETIME

from azure.devops.credentials import BasicAuthentication
from azure.devops.connection import Connection
from azure.devops.v6_0.work_item_tracking.models import Wiql
from azure.devops.v6_0.dashboard.models import TeamContext

# Range before sleeping until rate limit reset
MIN_RATE_LIMIT = 10
# Default sleep time and retries to deal with connection/server problems
DEFAULT_SLEEP_TIME = 1
MAX_RETRIES = 5

CATEGORY_PROJECT = "project"
CATEGORY_WORKITEMS= "workitems"

logger = logging.getLogger(__name__)


class AzureBoard(Backend):
    """AzureBoard backend for Perceval.

    This class retrieves the activities from AzureBoard API.

    :param url: the URL of a AzureBoard instance
    :param project: a AzureBoard project
    :param api_token: AzureBoard API token
    :param tag: label used to mark the data
    :param archive: archive to store/retrieve items
    :param max_retries: number of max retries to a data source
        before raising a RetryError exception
    :param sleep_for_rate: sleep until rate limit is reset
    :param min_rate_to_sleep: minimum rate needed to sleep until
         it will be reset
    :param sleep_time: time (in seconds) to sleep in case
        of connection problems
    :param ssl_verify: enable/disable SSL verification
    """
    version = '0.1.0'

    CATEGORIES = [CATEGORY_PROJECT, CATEGORY_WORKITEMS]

    def __init__(self, url, project=None, personal_access_token=None, tag=None, archive=None,
                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,
                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME, ssl_verify=True):

        super().__init__(url, tag=tag, archive=archive, ssl_verify=ssl_verify)

        self.personal_access_token = personal_access_token
        self.project = project
        self.max_retries = max_retries
        self.sleep_time = sleep_time
        self.sleep_for_rate = sleep_for_rate
        self.min_rate_to_sleep = min_rate_to_sleep

        self.client = None

    def fetch(self, category=CATEGORY_PROJECT, from_date=DEFAULT_DATETIME):
        """Fetch changes from AzureBoard API.

        The method retrieves the activity that occurred on a project via the AzureBoard API.

        :param category: the category of items to fetch

        :returns: a generator of data
        """
        if not from_date:
            from_date = DEFAULT_DATETIME

        kwargs = {
            'from_date': from_date
        }
        items = super().fetch(category, **kwargs)

        return items

    def fetch_items(self, category, **kwargs):
        """Fetch change items

        :param category: the category of items to fetch
        :param kwargs: backend arguments

        :returns: a generator of items
        """
        from_date = kwargs['from_date']
        logger.info("Fetching %s items on '%s' from '%s", category, self.origin, from_date)

        if category == CATEGORY_PROJECT:
            items = self.__fetch_projects()
        if category == CATEGORY_WORKITEMS:
            items = self.__fetch_workitems(self.project, from_date)
        
        logger.info("Fetch process completed")
        return items

    @classmethod
    def has_archiving(cls):
        """Returns whether it supports archiving items on the fetch process.

        :returns: this backend supports items archive
        """
        return False

    @classmethod
    def has_resuming(cls):
        """Returns whether it supports to resume the fetch process.

        :returns: this backend supports items resuming
        """
        return True

    @staticmethod
    def metadata_id(item):
        """Extracts the identifier from an item."""
        return str(item['id'])

    @staticmethod
    def metadata_updated_on(item):
        """Extracts the update time from an item.

        The timestamp used is extracted from 'timestamp' field.
        This date is converted to UNIX timestamp format taking into
        account the timezone of the date.

        :param item: item generated by the backend

        :returns: a UNIX timestamp
        """
        if 'visibility' in item:
            ts = item['last_update_time']
            ts = str_to_datetime(ts)
        else:
            ts = item['fields']['System.CreatedDate']
            ts = str_to_datetime(ts)

        return ts.timestamp()

    @staticmethod
    def metadata_category(item):
        """Extracts the category from a AzureBoard item.

        This backend only generates one type of item which is
        'changes'.
        """
        if 'visibility' in item:
            category = CATEGORY_PROJECT
        else:
            category = CATEGORY_WORKITEMS
        
        return category

    def _init_client(self, from_archive=False):
        """Init client"""
        return AzureBoardClient(self.origin, self.personal_access_token, self.project)
    
    def __fetch_projects(self):
        """Fetch the projects"""
        for project in self.client.projects():
            yield project.as_dict()

    def __fetch_workitems(self, project, from_date):
        """Fetch the work items"""
        workitems = self.client.workitems(project, from_date)
        for workitem in workitems:
            yield workitem.as_dict()

class AzureBoardClient(HttpClient):
    def __init__(self, origin, personal_access_token, project=None):
        
        self.credentials = BasicAuthentication('', personal_access_token)
        self.connection  = Connection(base_url=origin, creds=self.credentials)
        self.project = project

        super().__init__(origin)

    def projects(self):
        core_client = self.connection.clients.get_core_client()
        get_projects_response = core_client.get_projects()
        while get_projects_response is not None:
            for project in get_projects_response.value:
                yield project
            if get_projects_response.continuation_token is not None and get_projects_response.continuation_token != "":
                # Get the next page of projects
                get_projects_response = core_client.get_projects(continuation_token=get_projects_response.continuation_token)
            else:
                # All projects have been retrieved
                get_projects_response = None

    def workitems(self, project=None, from_date=None):
        """Fetch the work items from azure devops for a project"""
        wit_client = self.connection.clients.get_work_item_tracking_client()
        if from_date != None:
            date_param = f"""where [System.CreatedDate] >= '{from_date}'"""
        else:
            date_param = ""
        wiql = Wiql(
            query=f'''
select [System.Id],
[System.WorkItemType],
[System.Title],
[System.State],
[System.AreaPath],
[System.IterationPath],
[System.Tags],
[System.TeamProject]
from WorkItems 
{date_param} 
order by [System.Id] desc'''
            )
              
        if project == None:
            wiql_results = wit_client.query_by_wiql(wiql).work_items
        else:
            team_context = TeamContext(project=project)
            wiql_results = wit_client.query_by_wiql(wiql, team_context=team_context).work_items
        if wiql_results is not None:
            for work_item in wiql_results:
                yield wit_client.get_work_item(int(work_item.id))

class AzureBoardCommand(BackendCommand):
    """Class to run AzureBoard backend from the command line."""

    BACKEND = AzureBoard

    @classmethod
    def setup_cmd_parser(cls):
        """Returns the AzureBoard argument parser."""

        parser = BackendCommandArgumentParser(cls.BACKEND,
                                              archive=False,
                                              from_date=True,
                                              ssl_verify=True,
                                              token_auth=True)

        # AzureBoard options
        group = parser.parser.add_argument_group('AzureBoard arguments')
        group.add_argument('--sleep-for-rate', dest='sleep_for_rate',
                           action='store_true',
                           help="sleep for getting more rate")
        group.add_argument('--min-rate-to-sleep', dest='min_rate_to_sleep',
                           default=MIN_RATE_LIMIT, type=int,
                           help="sleep until reset when the rate limit reaches this value")
        group.add_argument('--project', dest='project', help="AzureBoard project")

        # Generic client options
        group.add_argument('--max-retries', dest='max_retries',
                           default=MAX_RETRIES, type=int,
                           help="number of API call retries")
        group.add_argument('--sleep-time', dest='sleep_time',
                           default=DEFAULT_SLEEP_TIME, type=int,
                           help="sleeping time between API call retries")

        # Positional arguments
        parser.parser.add_argument('url',
                                   help="AzureBoard URL")

        parser.parser.add_argument('personal_access_token',
                                   help="AzureBoard pat")

        return parser
